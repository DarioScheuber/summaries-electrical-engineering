# NumPy

``` python
import math as m

m.pow(2,3)  #Potenz Funktion y=f(x) =x^n
m.sqrt(4)   #Liefert die Wurzelfunktion y =wurzel(x)
m.exp(3)    #Exponent Funktion y=f(x) =e^n
m.pi        #Pi (3.1415…)

import numpy as np

np.power(2,3)
np.sqrt(4)
np.exp(2)
np.pi
```

::: callout-important
NumPy ist schneller als math, NumPy funktioniert besser mit Arrays.
:::

## Konstanten

![](images/paste-11.png){width="634"}

## Trigonometrie Funktionen

![](images/paste-14.png){width="636"}

## Weitere Funktionen

![](images/paste-15.png){width="631"}

![](images/paste-16.png){width="632"}

## Statistics Modul

``` python
import statistics as stat 
stat.mean(data)
stat.stdev(data)
stat.median(data)

import numpy as np

np.mean(data)
np.std(data)
np.median(data)
```

![](images/paste-17.png){width="374"}

## Array

![](images/paste-20.png){width="458"}

``` python
a = np.array([1, 2, 3, 4, 5, 6])    #1D Array    
a = np.array([  [1, 2, 3, 4],       #2D Array
                [5, 6, 7, 8],
                [9, 10, 11, 12]])

np.arange(12)           #[ 0 1 2 3 4 5 6 7 8 9 10 11]

np.linspace(0, 5, 50)   #50 Werte von 0 bis 5, regelmässig verteilt
```

Mit endpoint=False/True kann angegeben werden, ob der Endwert in der Liste enthalten sein soll (True) oder nicht (False). Default ist endpoint = True `np.linspace(0, 5, 50, endpoint=False)`

Weiteren Argumenten lässt sich der Start-(8) und Stoppwert(24), und die Schrittweite(3) definieren: `np.arange(8,24,3)`

::: {layout-ncol="3" layout-valign="center"}
![![](images/paste-23.png){width="232"}](images/paste-22.png){width="231"}

![](images/paste-24.png){width="237"}
:::

### Grösse, Dimensionen und Form von Arrays

`bsp_array.ndim` Gibt die Dimension retour `bsp_array.size` 3 \* 4 \* 5 Einträge `bsp_array.shape` Anzahl Rows (x), Columns (y) und Planes (z)

### Slicing

![](images/paste-25.png){width="429"}

![](images/paste-26.png){width="431"}

Jede weitere Dimension eines Arrays muss mit einem weiteren `,` oder `[ ]` indexiert (gesliced) werden

#### Beispiele für Slicing

![](images/paste-27.png){width="564"}

### Filtern

![](images/paste-29.png){width="551"}

![](images/paste-31.png){width="444"}

Numpy offeriert ebenfalls logische Verknüpfungen von Bool Arrays!

``` python
f1_and_f2 = np.logical_and(filter1,filter2)
not_f1 = np.logical_not(filter1)
f1_or_f2 = np.logical_or(filter1,filter2)
f1_xor_f2 = np.logical_xor(filter1,filter2)
```

### Manipulieren

Mit `.sort`, `.concatenate`, und `array.reshape()`, `array.transpose()`, `array.flip` können Arrays sortiert, aneinandergereiht, transponiert, umgekehrt oder umgeformt werden.

![](images/paste-33.png){width="348"}

![](images/paste-34.png){width="340"}

![](images/paste-36.png){width="338"}

![](images/paste-37.png){width="346"}

#### vstack

![](images/paste-38.png){width="344"}

#### hstack

![](images/paste-39.png){width="359"}

#### dtack

![](images/paste-40.png){width="348"}

#### flatten

Mit `.flatten()` lässt dich ein multidimensionales Array in ein 1D Array überführen

#### concatenate

Mit `.concatenate()` lassen Sich Arrays ebenfalls stapeln (\textbf{in alle Richtungen}) `np.concatenate((array_a, array_b), axis=0)` Mit \textbf{axis} kann definiert werden, in welche Richtung dass gestapelt wird.

### Grundoperationen

::: callout-important
Alle Standard - Operationen sind immer Element Wise Aber Achtung – das Automatische Erweitern kann scheitern ! Trotzdem Dimensionen checken!!!
:::

#### Matrix Multiplikationen

`np.matmul(data,data.T)` oder `data@data.T`

### Suchen

Mit `.where()` können Arrays durchsucht werden.

![](images/paste-42.png){width="497"}

``` python
data.max()
data.min()
data.sum()
```

## Wahrscheinlichkeitsverteilungen
### Normalverteilung (Gauß-Verteilung)

``` python
import numpy as np

# Generiere normalverteilte Zufallszahlen
mean = 0
std_dev = 1
size = 10
data_normal = np.random.normal(mean, std_dev, size)
```

### Gleichverteilung

``` python
import numpy as np

# Generiere gleichverteilte Zufallszahlen zwischen 0 und 1
size = 10
data_uniform = np.random.uniform(0, 1, size)
```

### Exponentialverteilung

``` python
import numpy as np

# Generiere Zufallszahlen aus einer Exponentialverteilung
lambd = 0.5
size = 10
data_exponential = np.random.exponential(1/lambd, size)
```

### Binomialverteilung

``` python
import numpy as np

# Generiere Zufallszahlen aus einer Binomialverteilung
n = 10  # Anzahl der Versuche
p = 0.5  # Wahrscheinlichkeit für Erfolg
size = 10
data_binomial = np.random.binomial(n, p, size)
```

### Poisson-Verteilung

``` python
import numpy as np

# Generiere Zufallszahlen aus einer Poisson-Verteilung
lambd = 3  # Ereignisrate
size = 10
data_poisson = np.random.poisson(lambd, size)
```

## Random

``` python
rand(d0, d1, …, dn)	#Random values in a given shape.
randn(d0, d1, …, dn)	#Return a sample (or samples) from the “standard normal” distribution.
randint(low[, high, size, dtype])	#Return random integers from low (inclusive) to high (exclusive).
random_integers(low[, high, size])	#Random integers of type np.int between low and high, inclusive.
random_sample([size])	#Return random floats in the half-open interval [0.0, 1.0).
random([size])	#Return random floats in the half-open interval [0.0, 1.0).
ranf([size])	#Return random floats in the half-open interval [0.0, 1.0).
sample([size])	#Return random floats in the half-open interval [0.0, 1.0).
choice(a[, size, replace, p])	#Generates a random sample from a given 1-D array
bytes(length)	#Return random bytes.
```

### Beispiele

``` python
np.random.rand(3,2)
>>>array([[ 0.14022471,  0.96360618],  #random
        [ 0.37601032,  0.25528411],  #random
        [ 0.49313049,  0.94909878]]) #random

np.random.rand(1)
>>>array([0.09707843])

3 + 2.5 * np.random.randn(2, 4)
array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random
       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random

```

\pagebreak

\includegraphics[page=1,angle=90,width=\textwidth]{doc/Numpy_Python_Cheat_Sheet.pdf}